[{"id":0,"href":"/bwplay-cli/docs/getting-started/","title":"Getting Started","section":"Docs","content":"Getting Started #  You can quickly start working with bwplay-cli by installing the package from npm and creating a sample project config:\nnpm i bwplay-cli npm exec -- bwplay-cli new Create a simple main.js file in the same directory:\nconst canvas = document.createElement(\u0026#39;canvas\u0026#39;); document.body.appendChild(canvas); const ctx = canvas.getContext(\u0026#39;2d\u0026#39;); canvas.style.display = \u0026#39;block\u0026#39;; canvas.style.margin = \u0026#39;0px\u0026#39;; canvas.style.padding = \u0026#39;0px\u0026#39;; canvas.style.width = \u0026#39;100%\u0026#39;; canvas.style.height = \u0026#39;100%\u0026#39;; const draw = () =\u0026gt; { window.requestAnimationFrame(draw); const c = Math.round(Math.abs(Math.sin(Date.now() / 1000) * 255)); ctx.fillStyle = `rgb(${c},${c},${c})`; ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height); }; draw(); JavaScript vs TypeScript\nbwplay-cli expects projects to be written in TypeScript, but JavaScript will work for simple use cases (like this example).\n Run the development server to see your code in action:\nnpm exec -- bwplay-cli serve You can export this project to get a self-contained version of your \u0026ldquo;game\u0026rdquo; as well:\nnpm exec -- bwplay-cli export open ./export/web/index.html To learn more about how bwplay-cli works, and to take advantage of its more advanced functionality, check out the page on configuring bwplay-cli.\n"},{"id":1,"href":"/bwplay-cli/docs/configuration/","title":"Configuration","section":"Docs","content":"Configuration #  bwplay-cli needs some light configuration in order to understand the structure of your project.\nAssumptions #  bwplay-cli makes some assumptions about your project - if these do not hold true, this tooling may not work for you.\nYour code takes care of building its own DOM. All generated HTML assumes that your JavaScript is okay with a blank HTML document (i.e. an empty \u0026lt;body\u0026gt; element). The most common situation is that the entire document is just be a single \u0026lt;canvas\u0026gt; object, created and inserted by the first JavaScript code that executes.\nConfiguration File #  All configuration is stored in a single file named bwplay.json. This file should be located at the root of your project. All bwplay-cli commands expect a bwplay.json to be in the current working directory (the directory from which you run bwplay-cli).\nAn example file may look something like this:\n{ \u0026#34;name\u0026#34;: \u0026#34;Test Game\u0026#34;, \u0026#34;javascriptFiles\u0026#34;: [\u0026#34;src/**/*.js\u0026#34;], \u0026#34;audioFiles\u0026#34;: [\u0026#34;assets/audio/*.wav\u0026#34;, \u0026#34;test.wav\u0026#34;], \u0026#34;iconFile\u0026#34;: \u0026#34;assets/icon.png\u0026#34;, \u0026#34;screenOrientation\u0026#34;: \u0026#34;landscape\u0026#34;, \u0026#34;androidPackageName\u0026#34;: \u0026#34;com.test.game\u0026#34;, \u0026#34;androidVersionCode\u0026#34;: 10003, \u0026#34;androidVersionName\u0026#34;: \u0026#34;0.3\u0026#34; } Properties #  name required #  The nice, human-readable name of the project.\njavascriptFiles required #  A list of glob patterns used to identify which JavaScript files should be included in the project. Files that aren\u0026rsquo;t detected by any glob pattern will not be served by the development server and will not be packed into the final game.\nWhat about .ts files?\nbwplay-cli does not try to insert itself into earlier stages of your build pipeline. TypeScript files should be rendered by your own build process, and the output files should be matched by one or more glob patterns.\n audioFiles #  A list of glob patterns used to find audio files that should be included in the project. These files are used when generating audio code, running the development server, and exporting the final game. Files that aren\u0026rsquo;t detected by any glob pattern will not make their way into the game.\nA large number of file types are supported. bwplay-cli does not care about the particular type of file you are trying to use - it will happily treat a PNG file as audio if the glob picks one up. If you\u0026rsquo;re targeting multiple platforms (e.g. most web browsers), consider using a popular/common audio format for your audio files.\nIf the tooling cannot figure out the type of one or more of your files, a warning message will be generated when attempting to generate audio code, and those unidentifiable files will not be included in the generated code.\nIf this setting is not specified, no audio code will be generated.\naudioScriptFile #  The path to a file which will contain generated TypeScript code for the project\u0026rsquo;s audio. Note that this file is generated by bwplay-cli and can be overwritten at any time - do not make manual changes to this file.\nIf this setting is not specified, generated code will be written to audio.ts in the top-level directory of the project.\niconFile #  The path to an image file that will be used as the icon for the game. Usages of this file include as a favicon, a PWA icon, and an Android app icon.\nThis image should ideally be at least 512x512 pixels in size; the image will be automatically scaled down (or up) to different sizes to meet the requirements of favicons, app icons, etc.\nscreenOrientation #  One of any, portrait, or landscape. Whether the game\u0026rsquo;s viewport should be taller than wide (portrait), wider than tall (landscape), or if the size doesn\u0026rsquo;t matter (any).\nSetting this to portrait or landscape will lock the viewport to this mode. \u0026ldquo;any\u0026rdquo; is only useful if your game is able to render itself regardless of screen resolution.\nandroidApplicationId #  The applicationId that you\u0026rsquo;d like to use when exporting to Android.\nThis setting is only necessary if you\u0026rsquo;ll be exporting to Android, however you cannot export to Android without it.\nandroidVersionCode #  An integer, designed to grow larger each time you release a new version of the Android app.\nIf you export to Android without setting this value, a low number will be chosen as a default.\nandroidVersionName #  An arbitrary human-readable string - it\u0026rsquo;s only purpose is to be shown to Android users so that they can identify the version of your app.\nIf you export to Android without setting this value, a low \u0026lt;major\u0026gt;.\u0026lt;minor\u0026gt;.\u0026lt;point\u0026gt; version string will be chosen as a default.\nandroidNetworkSecurityDomains #  A list of network domain names that your application should be allowed to communicate with. This maps to the concept of domains in the Android network security configuration. If you do not specify any domains here, your project will not be able to communicate with any websites.\n"},{"id":2,"href":"/bwplay-cli/docs/code-generator/","title":"Code Generator","section":"Docs","content":"Code Generator #  bwplay-cli can generate bits of code to ease the development process.\nAudio #  If your project has audio assets (specified by the audioFiles setting), bwplay-cli can generate code that exports an Audio object, which exposes all your audio assets as strictly-typed HTMLAudioElements.\nbwplay-cli generate-audio [--stdout] [--unpacked] Each audio element is named after its location in your project directory. Since assets are often stored in a common subdirectory, the common directory prefix is removed from the names of the members of the Audio object.\nFor example, assuming the following directory structure:\nmy-project/ ├─ bwplay.json ├─ assets │ ├─ music │ │ ├─ song.wav │ ├─ sounds │ │ ├─ thud.wav And the following config setting:\n\u0026#34;audioFiles\u0026#34;: [\u0026#34;assets/**/*.wav\u0026#34;], The generated Audio code would look something like:\nexport type Audio = { music_song: HTMLAudioElement, sounds_thud: HTMLAudioElement, }; export const loadAudio = (): Promise\u0026lt;Audio\u0026gt; =\u0026gt; { ... }; To reference this generated code in your project, you could write something like:\nimport { Audio, loadAudio } from \u0026#39;audio\u0026#39;; let AUDIO: Audio | null = null; loadAudio().then(v =\u0026gt; { AUDIO = v; }).catch(e =\u0026gt; handleAudioError); By default, generated audio code is written to the filesystem as specified by the audioScriptFile project setting. However, you can pass --stdout to instead print the generated code to your terminal.\nWhen the audio code is generated, the audio itself will be packed into the code as data urls. This is meant to simplify the process of building and distributing your game. If you want to avoid this behaviour, you can pass the --unpacked flag to the command, which will cause the audio in the code to be referenced by its filesystem path (relative to the project root).\nUnpacked audio code\nbwplay-cli will not re-generate the audio code when you export your project. If you use --unpacked and then export your project, the exported apps may not be able to load your audio.\n "},{"id":3,"href":"/bwplay-cli/docs/development-server/","title":"Development Server","section":"Docs","content":"Development Server #  bwplay-cli has a built-in development server, with the goal of making it easier to iterate on your project.\nbwplay-cli serve This server takes care of a number of tasks on your behalf, including:\n Providing an HTML file at the root of the server that loads your project\u0026rsquo;s JavaScript Limiting itself to only serving files that are part of your project Live re-generation of asset code  The HTML file at the root of the server is minimal - it has a body with no padding or margins that contains only \u0026lt;script\u0026gt; tags (which reference all the JavaScript files configured in the project settings). This HTML file is similar to the one used when exporting your project, so if your project works on the development server\u0026rsquo;s web page, it should work in the exports' too.\nFiles that are not referenced in the project settings (JavaScript, assets, etc) are not served by the development server. This is on purpose - unreferenced files will not be part of an export, and if you were to accidentally forget to include certain files, it would be best to catch that as soon as possible while developing.\n"},{"id":4,"href":"/bwplay-cli/docs/exporting/","title":"Exporting","section":"Docs","content":"Exporting #  bwplay-cli allows you to export your project to different platforms. This makes it easy to distribute your game to other (non-technical) people.\nbwplay-cli export There is no cross-compilation - different targets will runs your JavaScript as-is, just in different contexts. Your code in the exports is the same as it was in your project.\nBefore Exporting #  The export process will include the assets and JavaScript specified in your project settings. It is up to you to convert your TypeScript into JavaScript, bundle your code together, minify your code, etc. The export process performs no modifications to your JavaScript code.\nA very simple build-and-export process may look something like:\n# compile your TypeScript tsc main.ts # minify the resulting JavaScript babel-minify main.js # export the project bwplay-cli export Export Environment #  The export process creates its own index.html file that contains all of your project\u0026rsquo;s JavaScript in-line. The index.html has a body with no padding or margins that contains only \u0026lt;script\u0026gt; tags containing your JavaScript. This HTML file is similar to the one used by the development server.\nTypes of Exports #  Exports are located in the export/ directory in the root of your project. Each type of export will be in its own subdirectory (e.g. export/web/).\nWeb (PWA) #  Exporting will always create a Progressive Web App - an HTML file along with a web app manifest and some metadata. Outputting the project with this structure makes it easy to distribute your game as a simple website that can be \u0026ldquo;installed\u0026rdquo; on a mobile device.\nSince all of your JavaScript is inlined into the index.html, you could even distribute your game as a single .html file. However, this is not recommended if you\u0026rsquo;re serving your game over a network, as it limits how users can interact with your game.\nAndroid #  If the androidApplicationId setting is specified, exporting will generate an Android app module.\nA module is only part of the file structure necessary to build a complete Android app - to use the exported module, place it inside a new or existing Android Studio project.\nWhy export a module and not a project?\nDue to differences between development environments (SDK versions, installation paths, etc), bwplay-cli does not know enough about your specific setup to generate an entire Android Studio project.\n Under the hood, the Android module renders the generated index.html file in an Android WebView. By using this strategy, the Android module stays simple while still supporting browser JavaScript features (localStorage, fetch, etc).\n"}]